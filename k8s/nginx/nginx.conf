worker_processes 1;

events { worker_connections 1024; }

http {
    server {
        listen 80;

        location /auth/ {
            proxy_pass http://auth-service:3000/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location / {
            # Check for a valid JWT token in the Authorization header
            if ($http_authorization = "") {
                return 401 "Unauthorized";
            }

            # Validate the JWT token using the auth service
            set $token $http_authorization;
            access_by_lua_block {
                local jwt = require "resty.jwt"
                local response = ngx.location.capture("/auth/validate_token", {
                    method = ngx.HTTP_POST,
                    body = '{ "token": "' .. ngx.var.token .. '" }',
                    vars = { always_forward_body = true }
                })

                if response.status ~= 200 then
                    ngx.log(ngx.ERR, "Token validation failed: ", response.body)
                    ngx.exit(response.status)
                end

                local data = cjson.decode(response.body)
                if not data.valid then
                    ngx.log(ngx.ERR, "Token is invalid: ", data.error)
                    ngx.exit(401)
                end

                ngx.ctx.user = data.user
            }

            # If the token is valid, pass the request to the appropriate microservice
            proxy_pass http://$host$request_uri;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-User $user;
        }
    }
}