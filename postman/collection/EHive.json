{
	"info": {
		"_postman_id": "fde764b5-79b5-42fe-9ec1-c52caaade116",
		"name": "E-Hive",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29487700"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response has access and refresh tokens', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.access_token).to.be.a('string');",
									"    pm.expect(responseData.refresh_token).to.be.a('string');",
									"    ",
									"    pm.environment.set('access_token', responseData.access_token);",
									"    pm.environment.set('refresh_token', responseData.refresh_token);",
									"    pm.environment.set('user_id', responseData.user.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{random_email}}\",\n    \"password\": \"Test123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has access and refresh tokens', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.access_token).to.be.a('string');",
									"    pm.expect(responseData.refresh_token).to.be.a('string');",
									"    ",
									"    pm.environment.set('access_token', responseData.access_token);",
									"    pm.environment.set('refresh_token', responseData.refresh_token);",
									"    pm.environment.set('user_id', responseData.user.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{random_email}}\",\n    \"password\": \"Test123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has new access and refresh tokens', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.access_token).to.be.a('string');",
									"    pm.expect(responseData.refresh_token).to.be.a('string');",
									"    ",
									"    pm.environment.set('access_token', responseData.access_token);",
									"    pm.environment.set('refresh_token', responseData.refresh_token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refreshToken\": \"{{refresh_token}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/refresh",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response indicates successful verification', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.status).to.eql('ok');",
									"    pm.expect(responseData.user).to.be.an('object');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/auth/verify",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has user data', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.email).to.be.a('string');",
									"    pm.expect(responseData.id).to.be.a('string');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/auth/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"profile"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Events",
			"item": [
				{
					"name": "Create Event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response has event data', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.id).to.be.a('string');",
									"    pm.expect(responseData.title).to.be.a('string');",
									"    ",
									"    pm.environment.set('event_id', responseData.id);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Test Event\",\n    \"description\": \"This is a test event\",\n    \"date\": \"2024-12-31T23:59:59Z\",\n    \"location\": \"Test Location\",\n    \"capacity\": 100\n}"
						},
						"url": {
							"raw": "{{base_url}}/event",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"event"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Events",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is an array of events', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('array');",
									"    if (responseData.length > 0) {",
									"        pm.expect(responseData[0].id).to.be.a('string');",
									"        pm.expect(responseData[0].title).to.be.a('string');",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/event",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"event"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Event by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has event details', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.id).to.eql(pm.environment.get('event_id'));",
									"    pm.expect(responseData.title).to.be.a('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/event/{{event_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"event",
								"{{event_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Bookings",
			"item": [
				{
					"name": "Create Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response has booking data', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.id).to.be.a('string');",
									"    pm.expect(responseData.eventIds).to.be.an('array');",
									"    ",
									"    pm.environment.set('booking_id', responseData.id);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"eventIds\": [\"{{event_id}}\"],\n    \"userId\": \"{{user_id}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/booking",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User's Bookings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is an array of bookings', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('array');",
									"    if (responseData.length > 0) {",
									"        pm.expect(responseData[0].id).to.be.a('string');",
									"        pm.expect(responseData[0].eventIds).to.be.an('array');",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/booking/user/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking",
								"user",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Booking by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has booking details', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.id).to.eql(pm.environment.get('booking_id'));",
									"    pm.expect(responseData.eventIds).to.be.an('array');",
									"    pm.expect(responseData.userId).to.be.a('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/booking/{{booking_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking",
								"{{booking_id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"if (pm.request.url.path.includes('register')) {",
					"    const randomEmail = `test${Date.now()}@example.com`;",
					"    pm.environment.set('random_email', randomEmail);",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "access_token",
			"value": ""
		},
		{
			"key": "refresh_token",
			"value": ""
		}
	]
}