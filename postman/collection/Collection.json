{
	"info": {
		"_postman_id": "ba019354-00bc-495a-815d-b0643bfa14b4",
		"name": "E-Hive",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29487700"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('access_token');",
									"    pm.expect(responseData).to.have.property('refresh_token');",
									"    pm.expect(responseData.user).to.have.property('id');",
									"    pm.expect(responseData.user).to.have.property('email');",
									"",
									"    pm.environment.set('currentAccessToken', responseData.access_token);",
									"    pm.environment.set('currentRefreshToken', responseData.refresh_token);",
									"    pm.environment.set('currentUserId', responseData.user.id);",
									"    pm.environment.set('currentUserEmail', responseData.user.email);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.environment.get('currentUserEmail')) {",
									"    const randomEmail = 'test' + Date.now() + '@example.com';",
									"    pm.environment.set('currentUserEmail', randomEmail);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{currentUserEmail}}\",\n    \"password\": \"{{testPassword}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"{{verificationToken}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/verify-email",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"verify-email"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Login successful\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('access_token');",
									"    pm.expect(responseData).to.have.property('refresh_token');",
									"    pm.expect(responseData.user).to.have.property('userId'); ",
									"",
									"    pm.environment.set('currentAccessToken', responseData.access_token);",
									"    pm.environment.set('currentRefreshToken', responseData.refresh_token);",
									"    pm.environment.set('currentUserId', responseData.user.userId); ",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{currentUserEmail}}\",\n    \"password\": \"{{testPassword}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"New tokens received\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('access_token');",
									"    pm.expect(responseData).to.have.property('refresh_token');",
									"",
									"    pm.environment.set('currentAccessToken', responseData.access_token);",
									"    pm.environment.set('currentRefreshToken', responseData.refresh_token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Check if access token is expired and needs refresh",
									"const accessToken = pm.environment.get('currentAccessToken');",
									"if (accessToken) {",
									"    try {",
									"        const payload = JSON.parse(atob(accessToken.split('.')[1]));",
									"        const expiryTime = payload.exp * 1000; // Convert to milliseconds",
									"        ",
									"        if (Date.now() >= expiryTime) {",
									"            console.log('Access token expired, refreshing...');",
									"        }",
									"    } catch (e) {",
									"        console.error('Error checking token expiry:', e);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refreshToken\": \"{{currentRefreshToken}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/refresh",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Token is valid\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.status).to.eql('ok');",
									"    pm.expect(responseData).to.have.property('user');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{currentAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/auth/verify",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Profile data is present\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('email');",
									"    pm.expect(responseData).to.have.property('id');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{currentAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/auth/profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Forgot Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Reset email sent\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{currentUserEmail}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/forgot-password",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"forgot-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"{{resetToken}}\",\n    \"newPassword\": \"{{newPassword}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/reset-password",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"reset-password"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Get User Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Profile data is valid\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('email');",
									"    pm.expect(responseData).to.have.property('username');",
									"    pm.expect(responseData).to.have.property('isActive');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{currentAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/{{currentUserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"{{currentUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Profile updated successfully\", function () {",
									"    const responseData = pm.response.json();",
									"    const requestData = JSON.parse(pm.request.body.raw);",
									"",
									"    if (requestData.firstName) {",
									"        pm.expect(responseData.firstName).to.eql(requestData.firstName);",
									"    }",
									"    if (requestData.lastName) {",
									"        pm.expect(responseData.lastName).to.eql(requestData.lastName);",
									"    }",
									"    if (requestData.username) {",
									"        pm.expect(responseData.username).to.eql(requestData.username);",
									"        pm.environment.set('lastCreatedUsername', responseData.username);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate random user data",
									"pm.environment.set('randomFirstName', pm.variables.replaceIn('{{$randomFirstName}}'));",
									"pm.environment.set('randomLastName', pm.variables.replaceIn('{{$randomLastName}}'));",
									"pm.environment.set('randomUsername', 'user_' + pm.variables.replaceIn('{{$randomAlphaNumeric}}'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{currentAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{randomFirstName}}\",\n    \"lastName\": \"{{randomLastName}}\",\n    \"username\": \"{{randomUsername}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/user/{{currentUserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"{{currentUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Search response is valid\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('users').that.is.an('array');",
									"    pm.expect(responseData).to.have.property('metadata');",
									"    pm.expect(responseData.metadata).to.have.property('total');",
									"    pm.expect(responseData.metadata).to.have.property('page');",
									"    pm.expect(responseData.metadata).to.have.property('limit');",
									"    pm.expect(responseData.metadata).to.have.property('totalPages');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{currentAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/search?search={{lastCreatedUsername}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"search"
							],
							"query": [
								{
									"key": "page",
									"value": "{{defaultPageOffset}}",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "{{defaultPageLimit}}",
									"disabled": true
								},
								{
									"key": "search",
									"value": "{{lastCreatedUsername}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Bulk Create Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Users created successfully\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(user => {",
									"        pm.expect(user).to.have.property('id');",
									"        pm.expect(user).to.have.property('email');",
									"        pm.expect(user).to.have.property('isActive').to.be.true;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate random emails for bulk creation",
									"const email1 = pm.variables.replaceIn('{{$randomEmail}}');",
									"const email2 = pm.variables.replaceIn('{{$randomEmail}}');",
									"pm.environment.set('bulkEmail1', email1);",
									"pm.environment.set('bulkEmail2', email2);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{currentAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"users\": [\n        { \"email\": \"{{bulkEmail1}}\" },\n        { \"email\": \"{{bulkEmail2}}\" }\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/user/bulk",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"bulk"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deactivate Inactive Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Deactivation successful\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('deactivatedCount');",
									"    pm.expect(responseData.deactivatedCount).to.be.a('number');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{currentAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"daysInactive\": 60\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/user/deactivate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"deactivate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{currentAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/{{currentUserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"{{currentUserId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Event",
			"item": [
				{
					"name": "Create Event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Event created successfully\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('title');",
									"    pm.expect(responseData).to.have.property('organizerId');",
									"",
									"    pm.environment.set('lastCreatedEventId', responseData.id);",
									"    pm.environment.set('eventId', responseData.id);",
									"    pm.environment.set('organizerId', responseData.organizerId);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate event data",
									"const futureDate = new Date();",
									"futureDate.setDate(futureDate.getDate() + 30);",
									"pm.environment.set('futureEventDate', futureDate.toISOString());",
									"",
									"pm.environment.set('eventTitle', 'Tech Conference ' + pm.variables.replaceIn('{{$randomInt}}'));",
									"pm.environment.set('eventLocation', pm.variables.replaceIn('{{$randomCity}}') + ' Convention Center');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{currentAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"{{eventTitle}}\",\n    \"description\": \"Annual Tech Conference\",\n    \"date\": \"{{futureEventDate}}\",\n    \"location\": \"{{eventLocation}}\",\n    \"capacity\": {{defaultEventCapacity}},\n    \"organizerId\": \"{{currentUserId}}\",\n    \"tags\": [\"technology\", \"conference\"]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/event",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"event"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Events",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Events list is valid\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('array');",
									"    if (responseData.length > 0) {",
									"        pm.expect(responseData[0]).to.have.property('id');",
									"        pm.expect(responseData[0]).to.have.property('title');",
									"        pm.expect(responseData[0]).to.have.property('organizerId');",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{currentAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/event",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"event"
							],
							"query": [
								{
									"key": "limit",
									"value": "{{defaultPageLimit}}",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "{{defaultPageOffset}}",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "date",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "DESC",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Event by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Event details are valid\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('title');",
									"    pm.expect(responseData).to.have.property('organizerId');",
									"    pm.expect(responseData).to.have.property('capacity');",
									"    pm.expect(responseData).to.have.property('location');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{currentAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/event/{{eventId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"event",
								"{{eventId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Event updated successfully\", function () {",
									"    const responseData = pm.response.json();",
									"    const requestData = JSON.parse(pm.request.body.raw);",
									"    ",
									"    pm.expect(responseData.title).to.eql(requestData.title);",
									"    pm.expect(responseData.capacity).to.eql(requestData.capacity);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set('updatedEventTitle', 'Updated ' + pm.environment.get('eventTitle'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{currentAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"{{updatedEventTitle}}\",\n    \"description\": \"Updated Annual Tech Conference\",\n    \"capacity\": 700,\n    \"isActive\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/event/{{eventId}}/{{organizerId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"event",
								"{{eventId}}",
								"{{organizerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{currentAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/event/{{eventId}}/{{organizerId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"event",
								"{{eventId}}",
								"{{organizerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get My Events",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"My events list is valid\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('array');",
									"    if (responseData.length > 0) {",
									"        pm.expect(responseData[0]).to.have.property('id');",
									"        pm.expect(responseData[0]).to.have.property('title');",
									"        pm.expect(responseData[0].organizerId).to.eql(pm.environment.get('currentUserId'));",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{currentAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/event/my-events/{{currentUserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"event",
								"my-events",
								"{{currentUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upcoming Events",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Upcoming events are valid\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('array');",
									"    if (responseData.length > 0) {",
									"        const currentDate = new Date();",
									"        const eventDate = new Date(responseData[0].date);",
									"        pm.expect(eventDate.getTime()).to.be.at.least(currentDate.getTime());",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{currentAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/event/upcoming",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"event",
								"upcoming"
							]
						}
					},
					"response": []
				},
				{
					"name": "Events Tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Tagged events are valid\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('array');",
									"    if (responseData.length > 0) {",
									"        pm.expect(responseData[0]).to.have.property('tags');",
									"        pm.expect(responseData[0].tags).to.be.an('array');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{currentAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/event?tags[]=technology&tags[]=conference",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"event"
							],
							"query": [
								{
									"key": "tags[]",
									"value": "technology"
								},
								{
									"key": "tags[]",
									"value": "conference"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Booking",
			"item": [
				{
					"name": "Create Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Booking created successfully\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('userId');",
									"    pm.expect(responseData).to.have.property('status');",
									"    pm.expect(responseData.status).to.eql('pending');",
									"    pm.environment.set('bookingId', responseData.id); ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{currentAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": \"{{currentUserId}}\",\n    \"eventIds\": [\"{{eventId}}\"],\n    \"notes\": \"Test booking\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/booking",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Bookings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User bookings are valid\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('array');",
									"    if (responseData.length > 0) {",
									"        pm.expect(responseData[0]).to.have.property('id');",
									"        pm.expect(responseData[0]).to.have.property('userId');",
									"        pm.expect(responseData[0]).to.have.property('status');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{currentAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/booking/user/{{currentUserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								"user",
								"{{currentUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Booking updated successfully\", function () {",
									"    const responseData = pm.response.json();",
									"    const requestData = JSON.parse(pm.request.body.raw);",
									"    pm.expect(responseData.status).to.eql(requestData.status);",
									"    pm.expect(responseData.notes).to.eql(requestData.notes);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{currentAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"confirmed\",\n    \"notes\": \"Updated booking notes\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/booking/{{bookingId}}/{{currentUserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								"{{bookingId}}",
								"{{currentUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cancel Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Booking cancelled successfully\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.status).to.eql('cancelled');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{currentAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"reason\": \"Schedule conflict\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/booking/{{bookingId}}/{{currentUserId}}/cancel",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								"{{bookingId}}",
								"{{currentUserId}}",
								"cancel"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}